package com.sbnz;

import com.sbnz.studycalendarapp.model.Obligation;
import com.sbnz.studycalendarapp.model.Subject;
import com.sbnz.studycalendarapp.model.Student;
import com.sbnz.studycalendarapp.enums.StudentActivity;
import java.util.List;

global List<Obligation> $finishedObligations;



rule "Finished obligations and earned points"
    when
    	$s: Subject($obligations: obligations)
        accumulate(
       		Obligation($o: this, finished, $earnedPoints: earnedPoints) from $obligations,
       		$finished: collectList($o),
       		$points: sum($earnedPoints)
    	)
    then
    	$finishedObligations.addAll($finished);
    	modify($s) {setEarnedPoints($points)};
end

rule "All subject's obligations are finished"
    when
    	$s: Subject($id: id, $obligationsNum: obligations.size())
    	accumulate(
       		Obligation($o: this, subject.id == $id) from $finishedObligations,
       		$finishedForSubject: count($o)
    	)
    	eval($finishedForSubject == $obligationsNum)
    then
    	modify($s) {setFinished(true)};
end

rule "Subject graded with 5"
    when
    	$s: Subject(finished, earnedPoints < 51)
    then
    	modify($s) {setPassed(false), setGrade(5)};
end

rule "Subject graded with 6"
    when
    	$s: Subject(finished, earnedPoints >= 51, earnedPoints < 61)
    then
    	modify($s) {setPassed(true), setGrade(6)};
end

rule "Subject graded with 7"
    when
    	$s: Subject(finished, earnedPoints >= 61, earnedPoints < 71)
    then
    	modify($s) {setPassed(true), setGrade(7)};
end

rule "Subject graded with 8"
    when
    	$s: Subject(finished, earnedPoints >= 71, earnedPoints < 81)
    then
    	modify($s) {setPassed(true), setGrade(8)};
end

rule "Subject graded with 9"
    when
    	$s: Subject(finished, earnedPoints >= 81, earnedPoints < 91)
    then
    	modify($s) {setPassed(true), setGrade(9)};
end

rule "Subject graded with 10"
    when
    	$s: Subject(finished, earnedPoints >= 91)
    then
    	modify($s) {setPassed(true), setGrade(10)};
end

rule "Student's points for finished and passed obligations"
	no-loop
    when
    	$s: Student($activityPoints: activityPoints)
    	$o: Obligation(finished, passed, $earnedPoints: earnedPoints, $priority: priority)
    then
    	modify($s) {setActivityPoints($activityPoints + 10 * (5 - $priority) + $earnedPoints)};
end

rule "Student's points for skipped obligations"
	no-loop
    when
    	$s: Student($activityPoints: activityPoints)
    	$o: Obligation(skipped, $priority: priority)
    then
    	modify($s) {setActivityPoints($activityPoints - 10 * (5 - $priority))};
end
